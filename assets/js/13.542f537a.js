(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{173:function(e,a,s){e.exports=s.p+"assets/img/BeaconSET+.bcc1157c.png"},174:function(e,a,s){e.exports=s.p+"assets/img/add_frameworks.8a932d1c.png"},175:function(e,a,s){e.exports=s.p+"assets/img/make_sure_frameworks.d4466176.png"},176:function(e,a,s){e.exports=s.p+"assets/img/bp_access.795e088e.png"},230:function(e,a,s){"use strict";s.r(a);var n=[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"beaconplus-ios-software-development-kit-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beaconplus-ios-software-development-kit-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" BeaconPlus iOS Software Development Kit Guide")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Updating…")])])]),e._v(" "),n("p",[e._v("This SDK only support devices based on miniBeaconPlus firmware, it doesn't compatible with previous devices, such as iBeacon, eddystone and etc. BeaconSET+ SDK support more feature than BeaconSET SDK. We encountered some issues in the development process, So, please read this document carefully in order to help you get started as soon as possible. At the same time, this document will also inform the notes and issues.")]),e._v(" "),n("p",[e._v("please read the part of this document which you need,  part 1 we will explain the architecture of this SDK, part 2 will help developers to get started, part 3 will explain notes in your developing progress, part 4 you can get error codes and descriptions.")]),e._v(" "),n("h2",{attrs:{id:"design-instructions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#design-instructions","aria-hidden":"true"}},[e._v("#")]),e._v(" Design instructions")]),e._v(" "),n("p",[e._v("We divide the communications between SDK and devices into two stages: Scanning stage, Connection stage. For ease of understanding, let's take a look at the related classes and the relationships between them.")]),e._v(" "),n("p",[n("strong",[e._v("MTCentralManager:")]),e._v(" global manager, check system's bluetooth status, listen status changes, the most important is scan and connect to devices;")]),e._v(" "),n("p",[n("strong",[e._v("MTPeripheral:")]),e._v(" instance of devices, MTCentralManager will create an MTPeripheral instance while it found a physical device, a device corresponds to an instance. every MTPeripheral instance has a MTFrameHandler property and a MTConnectionHandler property(These two properties are explained below);")]),e._v(" "),n("p",[n("strong",[e._v("MTFrameHandler:")]),e._v(" Advertisement frame analysis, it can analyze all frames from advertisement data of a device. in other words, it's the core of the scanning stage;")]),e._v(" "),n("p",[n("strong",[e._v("MTConnectionHandler:")]),e._v(" connection Operator. this class control all the operation of device in connection stage.")]),e._v(" "),n("p",[e._v('**MinewFrame:**data frame, every minewframe(or subclass) instance corresponds to a data frame, usually created by "MTFrameHandler", if a device advertises mutiple data frames(such as iBeacon, UID, URL) "MTFrameHandler" will create multiple corresponding MinewFrame instances.')]),e._v(" "),n("p",[n("strong",[e._v("MTOTAManager:")]),e._v(" OTA, use this class for update device's firmware only.")]),e._v(" "),n("h2",{attrs:{id:"overall-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overall-structure","aria-hidden":"true"}},[e._v("#")]),e._v(" Overall structure")]),e._v(" "),n("p",[n("img",{attrs:{src:s(173),alt:"BeaconSET+"}})]),e._v(" "),n("h4",{attrs:{id:"advertisement-stage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advertisement-stage","aria-hidden":"true"}},[e._v("#")]),e._v(" Advertisement Stage")]),e._v(" "),n("p",[e._v("in this stage, "),n("strong",[e._v("MTCentralManager")]),e._v(" will scan and analyze the advertisement data of miniBeaconPlus devices, "),n("strong",[e._v("MTCentralManager")]),e._v(" will create "),n("strong",[e._v('"MTPeripheral"')]),e._v(" instance for every physical devices, developers can get all advertisement data by its "),n("strong",[e._v("MTFrameHandler")]),e._v(" property.")]),e._v(" "),n("h4",{attrs:{id:"connection-stage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connection-stage","aria-hidden":"true"}},[e._v("#")]),e._v(" Connection Stage")]),e._v(" "),n("p",[e._v("After a "),n("strong",[e._v("MTPeripheral")]),e._v(" connected, developer can make some changes of the device by "),n("strong",[e._v("MTConnectionHandler")]),e._v("(a Property of "),n("strong",[e._v("MTPeripheral")]),e._v(" instance).")]),e._v(" "),n("h4",{attrs:{id:"ota-operations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ota-operations","aria-hidden":"true"}},[e._v("#")]),e._v(" OTA Operations")]),e._v(" "),n("p",[e._v("In general, OTA operations is complicated, so we encapsulates the "),n("strong",[e._v("MTOTAManager")]),e._v(" to perform firmware update operations, please note developer can update devices only in connection status.")]),e._v(" "),n("h2",{attrs:{id:"get-started"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-started","aria-hidden":"true"}},[e._v("#")]),e._v(" Get Started")]),e._v(" "),n("h3",{attrs:{id:"prepare"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prepare","aria-hidden":"true"}},[e._v("#")]),e._v(" Prepare")]),e._v(" "),n("h4",{attrs:{id:"development-environment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#development-environment","aria-hidden":"true"}},[e._v("#")]),e._v(" Development environment:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Xcode9+")]),e._v("， due to the DFU and Zip Framework based on Swift4.0, so please use Xcode9 or high version to develop;")]),e._v(" "),n("li",[n("strong",[e._v("iOS8")]),e._v(", we limit the minimum iOS system version to 8.0;")])]),e._v(" "),n("h4",{attrs:{id:"import-to-project"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-to-project","aria-hidden":"true"}},[e._v("#")]),e._v(" Import to Project")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("copy the framework files to your project folder，include "),n("strong",[e._v('"MTBeaconPlus.framework"')]),e._v(", "),n("strong",[e._v('"iOSDFULibrary.framework"')]),e._v(", "),n("strong",[e._v('"Zip.framework"')]),e._v(", then add them to your project, make sure the "),n("strong",[e._v('"target"')]),e._v(" is checked. as the screenshot below:      "),n("img",{attrs:{src:s(174),alt:"add frameworks"}})])]),e._v(" "),n("li",[n("p",[e._v("find: "),n("strong",[e._v('"Target"')]),e._v(" -> "),n("strong",[e._v("General")]),e._v(" -> "),n("strong",[e._v("Embedded Binaries")]),e._v(", click the "),n("strong",[e._v('"+"')]),e._v(" below, add that 3 framework files. at the same time, make sure add them to "),n("strong",[e._v('"Linked Frameworks and Librarys"')]),e._v(", as the screenshot blew:")]),e._v(" "),n("p",[n("img",{attrs:{src:s(175),alt:"make sure frameworks"}})])]),e._v(" "),n("li",[n("p",[e._v("*about using swift, the developer should add a "),n("strong",[e._v('"Objective C BridgingHeader.h"')]),e._v(" file to the project(please do this by yourself), then add "),n("strong",[e._v('"import < MTBeaconPlus/MTBeaconPlus.h >"')]),e._v(" to the file.")])]),e._v(" "),n("li",[n("p",[e._v('!!!on iOS 10 and above, Apple add authority  control of bluetooth, you need add the string to "info.plist" file of your project: '),n("em",[e._v("Privacy - Bluetooth Peripheral Usage Description")]),e._v(" - "),n("em",[e._v('"your description"')]),e._v(". as the screenshot below.")]),e._v(" "),n("p",[n("img",{attrs:{src:s(176),alt:"bp_access"}})])])]),e._v(" "),n("h3",{attrs:{id:"start-developing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#start-developing","aria-hidden":"true"}},[e._v("#")]),e._v(" Start Developing")]),e._v(" "),n("h5",{attrs:{id:"get-sharedinstance-of-manager"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-sharedinstance-of-manager","aria-hidden":"true"}},[e._v("#")]),e._v(" Get sharedInstance of Manager")]),e._v(" "),n("p",[e._v("First of all, the developer should get the sharedInstance of Manager:")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// get sharedInstance\nMTCentralManager *manager = [MTCentralManager sharedInstance];\n\n// listen the change of iPhone bluetooth\n// *** also get from "state" property.\n// *** this SDK will work normally only while state == PowerStatePoweredOn!\nmanager.stateBlock = ^(PowerState state) {\n     NSLog("current bluetooth state：%d",state);\n};\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("h5",{attrs:{id:"scan-devices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scan-devices","aria-hidden":"true"}},[e._v("#")]),e._v(" Scan devices")]),e._v(" "),n("p",[e._v("start scanning task to find devices around you, then you can get their advertisement content, connect to device and change parameters.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*\n  manager: sharedInstance of MTCentralManager\n*/\n\n// start scanning task\n[manager startScan:^(NSArray<MTPeripheral *> *peris){\n  \n   // Traverse the array，get instance of every device.\n   // ** you can also display them on views.\n    for(NSInteger i = 0; i < peris; i ++){\n        MTPeripheral *peri = peris[i];\n        \n        // get FrameHandler of a device.\n        // **some properties maybe nil\n        MTFrameHandler *framer = peri.framer; \n        NSString *name = framer.name;          // name of device, may nil\n        NSInteger rssi = framer.rssi;          // rssi\n        NSInteger battery = framer.battery;    // battery,may nil\n        NSString *mac = framer.mac;            // mac address,may nil\n        NSArray *frames = framer.advFrames;    // all data frames of device（such as:iBeacon，UID，URL...）\n    }\n}];\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("at the sometime, you can stop the scanning task in this way:")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*\n  manager: sharedInstance of MTCentralManager\n*/\n\n// stop the task.\n[manager stopScan];\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("now the developer can get all advertisement data of device in this way. Next, we will talk about how to get frame data, such as "),n("strong",[e._v("iBeacon")]),e._v(", "),n("strong",[e._v("URL")]),e._v(", "),n("strong",[e._v("UID")]),e._v(" and etc...")]),e._v(" "),n("p",[e._v("Please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n  aFrameHandler: a MTFrameHandler instance.\n*/\n\nNSArray *frames = aFrameHandler.advFrames;\nfor (NSInteger i = 0; i < frames.count; i ++){\n    MinewFrame *frame = frames[i];\n    \n    switch(frame.frameType){\n      case FrameiBeacon: \n        {\n          MinewiBeacon *bea = (MinewiBeacon *)frame;\n          NSLog(@"iBeacon:%@, %d, %d",bea.uuid, bea.major, bea.minor);\n        }\n           break;\n        \n      case FrameUID:\n        {\n           MinewUID *uid = (MinewUID *)frame;\n           NSLog(@"UID:%@, %@", uid.namespaceId, uid.instanceId);\n        }\n           break;\n      /*\n         Handle more types by yourself. \n      */\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("p",[n("strong",[e._v("Important:")]),e._v(" for all types of sensor value, if it equals to "),n("em",[e._v("MTNAValue")]),e._v('（a not available value we defined, in file "MTPublicHeader.h"), it means that this value is not available.')]),e._v(" "),n("p",[e._v("Please refer to the code example below:")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n    aHT: a MinewHTSensor instance\n    aLight: a MinewLightSensor instance\n    aAcc：a MinewAccSensor instance\n*/\n\nif (aHT.temperature == MTNAValue) {\n    NSLog(@"this value is not available.")\n}\n\nif (aLight.luxValue == MTNAValue) {\n    NSLog(@"this value is not available.")\n}\n\nif (aAcc.XAxis == MTNAValue) {\n    NSLog(@"this value is not available.")\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("h5",{attrs:{id:"connect-to-device"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-device","aria-hidden":"true"}},[e._v("#")]),e._v(" Connect to device")]),e._v(" "),n("p",[e._v("Connect to the device in order to do more operations(change parameter, OTA). you will find that when connect to device password may need, so "),n("strong",[e._v('the "password Validating Block" must not be NULL, otherwise the app will crash!!!!')])]),e._v(" "),n("p",[e._v("Please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n  manager： a MTCentralManager sharedInstance\n  aMTPeripheral： a MTPeripheral instance\n*/\n\n// listen the change of device connection state\naMTPeripheral.connector.statusChangeHandler = ^(ConnectionStatus status, NSError *error) {\n    \n    /*\n     there is mutiple state when connect to the device,\n     only "status == StatusCompleted" means connection operations success.\n     if exception appears, error will not be NULL\n    */\n};\n\n// Connect to the device\n// the aMTPeripheral is a device instance\n// !!!:Warnning: passwordRequire must not be NULL!!!\n[manager connectToPeripheral:aMTPeripheral passwordRequire:^(MTPasswordBlock passwordBlock){\n     // the length of password string must be 8.\n    // !!! read the input content from the UITextField as a password in development.\n    NSString *password = @"minew123";\n    passwordBlock(password);\n}];\n\n// disconnec from the device.\n[manager disconnectFromPeriperal:aMTPeripheral];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("h5",{attrs:{id:"get-base-information"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-base-information","aria-hidden":"true"}},[e._v("#")]),e._v(" Get base information")]),e._v(" "),n("p",[e._v("the developer can get device information and modify parameters when a device connected.")]),e._v(" "),n("p",[e._v("the code example below let the developer get the base data of the device.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*\n   aMTPeripheral：a MTPeripheral instance\n*/\n\nMTConnectionHandler *con = aMTPeripheral.connector;\n\nConnectionStatus conSte = con.status;  // current connection status\nNSDictionary *infoDict = con.infoDict; // device info, such as：（Firmware Version： 0.9.1）;\nNSString *mac = con.macString; // mac address；\nConnectable able = con.connectable； // device connectable，None Unknown，No disable，Yes enable\nVersion version = con.version； // Version of firmware；\nPasswordStatus pwdStatus = con.passwordStatus; // password require or not. None, Require\n\nMTConnectionFeature *feature = con.feature; // device features\nNSInteger slotAtitude = feature.slotAtitude; // atitude of slot(s), \nFeatureSupported feaSup = feature.featureSupported; // parameters can be modified：none，adv,txpower,adv/txpower\nNSArray<NSNumber *> *supFrames = feature.supportedSlots; // frames supported（multiple）\nNSArray<NSNumber *> *supTxpower = feature.supportedTxpowers; // Txpower supported（multiple）\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[n("strong",[e._v("PS:")]),e._v(" "),n("strong",[e._v("MTConnectionHandler")]),e._v("’s "),n("em",[e._v("Version")]),e._v(" property.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("The version value comes form firmware version， check the version value to find out functions the device support:\n \n// init value\nVersionUndefined\n\n// base version, base function only.\nVersionBase\n\n// this version or above support custom connection password and device info frame.\nVersion0_9_8\n\n// this version or above support remote shut down.\nVersion0_9_9\n\n// this version or above support triggers.\nVersion2_0_0\n\n// this version or above support triggers with adv configs.\nVersion2_2_60\n\n// ideal value, support all features.\nVersionMax = 1000\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("h5",{attrs:{id:"get-data-of-each-slot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-data-of-each-slot","aria-hidden":"true"}},[e._v("#")]),e._v(" Get data of each Slot")]),e._v(" "),n("p",[e._v("Next, let talk about the parameter data of every slot, the reason why we speak about this is because all the content of changing parameters is here.")]),e._v(" "),n("p",[n("strong",[e._v("Slot")]),e._v(" :Before read the code, let's talk about slot, you can think slot as a advertisement tool, it advertise the content of advertisement data even \"don't know\" what the content is. such as the 6 slots may like this:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Slot Number")]),e._v(" "),n("th",[e._v("0")]),e._v(" "),n("th",[e._v("1")]),e._v(" "),n("th",[e._v("2")]),e._v(" "),n("th",[e._v("3")]),e._v(" "),n("th",[e._v("4")]),e._v(" "),n("th",[e._v("5")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Adv content")]),e._v(" "),n("td",[e._v("iBeacon")]),e._v(" "),n("td",[e._v("TLM")]),e._v(" "),n("td",[e._v("UID")]),e._v(" "),n("td",[e._v("URL")]),e._v(" "),n("td",[e._v("HTSensor")]),e._v(" "),n("td",[e._v("None")])]),e._v(" "),n("tr",[n("td",[e._v("Adv interval（ms）")]),e._v(" "),n("td",[e._v("1000")]),e._v(" "),n("td",[e._v("2000")]),e._v(" "),n("td",[e._v("500")]),e._v(" "),n("td",[e._v("900")]),e._v(" "),n("td",[e._v("3000")]),e._v(" "),n("td",[e._v("0")])]),e._v(" "),n("tr",[n("td",[e._v("RSSI@0/1m（dbm）")]),e._v(" "),n("td",[e._v("-1")]),e._v(" "),n("td",[e._v("0")]),e._v(" "),n("td",[e._v("-4")]),e._v(" "),n("td",[e._v("-10")]),e._v(" "),n("td",[e._v("-3")]),e._v(" "),n("td",[e._v("0")])]),e._v(" "),n("tr",[n("td",[e._v("Txpower（dbm）")]),e._v(" "),n("td",[e._v("4")]),e._v(" "),n("td",[e._v("0")]),e._v(" "),n("td",[e._v("-4")]),e._v(" "),n("td",[e._v("4")]),e._v(" "),n("td",[e._v("0")]),e._v(" "),n("td",[e._v("0")])])])]),e._v(" "),n("p",[e._v("By meaning of the table, the "),n("strong",[e._v("No.0")]),e._v("  slot will advertise "),n("strong",[e._v("iBeacon")]),e._v(" data, the "),n("strong",[e._v("No.1")]),e._v(" slot will advertise "),n("strong",[e._v("TLM")]),e._v(" data, …, the "),n("strong",[e._v("No.5")]),e._v(" slot will not advertise any data. each of them have their own "),n("strong",[e._v("advertising interval")]),e._v(", "),n("strong",[e._v("Txpower")]),e._v(" and "),n("strong",[e._v("Calibration RSSI")]),e._v(". They are independent of each other.")]),e._v(" "),n("p",[e._v("PS: "),n("strong",[e._v("Calibration RSSI(RSSI@0/1m)")]),e._v(" is the RSSI when device @ 0/1m(iBeacon is 1, others 0).")]),e._v(" "),n("p",[e._v("How to get the slot advertisement data? please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*\n    con: a MTConnectionHandler instance\n*/\n\n// each slot has a frame of current device.\n// atitude of this array is equals to slot atitude(feature.slotAtitude)\n// \n// In strict accordance with the order of the slot，such as：0. -> MinewiBeacon，1. -> MinewUID ...\nNSArray<MinewFrame *> *frames = con.allFrames;\n\n/*\n   We assume the No.3 slot has iBeacon data, the No.4 slot has UID data.\n   let's try to analyze the data of No.3 slot.\n*/\n\n// due to the defualt point is MinewFrame(the superclass of MinewiBeacon), so we need make a conversion.\n\n// get the frame of No.3 slot\nMinewFrame *frame = frames[2];\n\n// check this slot has iBeacon data or not,\n// *You can not check if you confirm its type.\nif (frame.frameType == FrameiBeacon) {\n  \n    MinewiBeacon *iBeacon = (MinewiBeacon *)frame;\n  \n    // iBeacon data\n    NSString *uuid = iBeacon.uuid;   // uuid\n    NSInteger major = iBeacon.major;  // major\n    NSInteger minor = iBeacon.minor;  // minor\n  \n    // the other parameters of this slot\n    NSInteger slotNumber = iBeacon.slotNumber           // number of the slot\n    NSInteger slotAdvInterval = iBeacon.slotAdvInterval // advertisement interval\n    NSInteger slotAdvTxpower = iBeacon.slotAdvTxpower   // RSSI@0/1m\n    NSInteger slotRadioTxpower = iBeacon.slotRadioTxpower // radio Txpower  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br")])]),n("p",[e._v("You can analyze the data of other slots in the same way, it's worth noting that when "),n("strong",[e._v("frameType == FrameNone")]),e._v(" means the slot has no data: From another perspective it means this slot is closed.")]),e._v(" "),n("h5",{attrs:{id:"change-slot-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-slot-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Change slot data")]),e._v(" "),n("p",[e._v("The developer can modify advertisement and parameters of every slot freely via our APi.")]),e._v(" "),n("p",[e._v("We divide the data frame into "),n("strong",[e._v("static frames")]),e._v(" and "),n("strong",[e._v("dynamic frames")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Static frame")]),e._v(": advertisement data will not change when it was advertise, such as "),n("strong",[e._v("iBeacon")]),e._v(", "),n("strong",[e._v("UID")]),e._v(", "),n("strong",[e._v("URL")])]),e._v(" "),n("li",[n("strong",[e._v("Dynamic frame")]),e._v(": advertisement data will change while it was advertise, such as "),n("strong",[e._v("TLM")]),e._v(", "),n("strong",[e._v("Sensor")])])]),e._v(" "),n("p",[e._v("Please refer to the code example below:")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n   aConnectionHandler:a MTConnectionHandler instance\n*/\n\n// create a uid instance\nMinewUID *uid = [[MinewUID alloc]init];\n\n// set "namespaceId" and "instanceId" of UID\nuid.namespaceId = @"0123456789abdcdcba12";\nuid.instanceId = @"0123456789dc";\n\n// the other parameters of slot\nuid.slot = 1;  // The number of slot which you want to modify\nuid.slotAdvInterval = 600;  // advertisement interval\nuid.slotAdvTxpower = -3;    // RSSI@0m\nuid.slotRadioTxpower = 4;   // Radio txpower.\n\n// write to device.\n// detail: 1.let No.1 slot advertise UID data, namespaceId：0123456789abdcdcba12 instanceId：0123456789dc\n//         2.set No.1 slot advertisement interval to 600ms, RSSI@0m to -3dbm, radio txpower to 4dbm \n[aConnectionHandler writeFrame:uid completion:^(BOOL success, NSError *error){\n     if（success）{\n        NSLog(@"write frame to device successfully.");   \n     } \n     else if(error) {\n        NSLog(@"Error:%@", error)\n     }\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br")])]),n("p",[e._v("Becareful, the slot parameter has ranges:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Advertisement interval")]),e._v(": 100 - 5000 (ms)")]),e._v(" "),n("li",[n("strong",[e._v("RSSI@0m")]),e._v(": -127 - 0 (dbm)")])]),e._v(" "),n("p",[n("strong",[e._v("The most import")]),e._v(': Radio txpower is not a range, it\'s grade, such as: -8, -4, 0, 4. you can get all supported Radio Txpowers from the feature property of the "MTConnectionHandler"')]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*\n   feature: a property of MTConnectionHandler.\n*/\n\n// get all supported Radio txpower of current device.\nNSArray<NSNumber *> *supTx = feature.supportedTxpowers\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("OK, you can modify any slot in the way above, if you want to close a slot, only need to create a "),n("strong",[e._v("MinewFrame")]),e._v(" instance and make its "),n("strong",[e._v("frameType")]),e._v(" property to "),n("strong",[e._v("FrameNone")]),e._v(", then write this frame to device. oh don't forget to set a slotnumber for the slot which you want to close.")]),e._v(" "),n("h5",{attrs:{id:"change-global-parameter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-global-parameter","aria-hidden":"true"}},[e._v("#")]),e._v(" Change global parameter")]),e._v(" "),n("p",[e._v("Global parameter of device is a device level feature, such as connectable, password require, reset to default and etc.")]),e._v(" "),n("p",[e._v("Please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n   aConnectionHandler: a MTConnectionHandler instance\n*/\n// reset the device\n[aConnectionHandler resetFactorySettings:^(BOOL success, NSError *error){\n    if(success){\n        NSLog(@"Operation success!");\n    }\n    else {\n        NSLog(@"Opertion failed!");\n    }\n}];\n\n// update connectable settings\n// ConnectableYES: app can connect to the device, ConnectableNO app can\'t connect to the device.\n// if you set connectableNO, you can connect to device by press the button on device maybe next time.\n// DANGER!!!:if there is no button on device and set ConnectableNO, the app can\'t connect to device even forever.\n[aConnectionHandler updateConnectable:ConnectableYES completion:^(BOOL success, NSError *error){\n    if(success){\n        NSLog(@"Operation success!");\n    }\n    else {\n        NSLog(@"Opertion failed!");\n    }\n}];\n\n// Modify/Add password\n// !!!: the password string length must be 8, digits or letters；\n// it will add password if device has no password, update password if device has a password\n[aConnectinoHandler modifyPassword:@"12345678" completion:^(BOOL success, NSError *error){\n    if(success){\n        NSLog(@"Operation success!");\n    }\n    else {\n        NSLog(@"Opertion failed!");\n    }\n}];\n\n// remove password\n[aConnectionHandler removePassword:^(BOOL success, NSError *error){\n    if(success){\n        NSLog(@"Operation success!");\n    }\n    else {\n        NSLog(@"Opertion failed!");\n    }\n}];\n\n// remote shut down the device.\n// DANGER!!!: please make sure there a button on device, otherwise it may not boot again.\n[aConnectionHandler poweroff];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br")])]),n("h5",{attrs:{id:"read-ht-sensor-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-ht-sensor-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Read HT Sensor data")]),e._v(" "),n("p",[e._v("BeaconPlus devices integrated a variety of sensors: "),n("strong",[e._v("HT(Temperature and Humidity )")]),e._v(", "),n("strong",[e._v("Light")]),e._v(", "),n("strong",[e._v("Acceleration")]),e._v(" and etc, currently we provide APi  for read HT History data.")]),e._v(" "),n("p",[e._v("Please make sure the device has "),n("strong",[e._v("HT Sensor")]),e._v(", otherwise you can't get data correctly.")]),e._v(" "),n("p",[e._v("Please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n   aConnectionHandler: a MTConnectionHandler instance\n*/\n\n// read HT History from the device\n[aConnectionHandler readSensorHistory:^(MTSensorData *data, EndStatus end){\n  \n   // a record corresponds to an instance\n   NSInteger time = data.timestamp;   // the Unix timestamp；\n   double temp = data.temperature;    // temperature data；\n   double humi = data.humidity;       // humidity data；\n   NSInteger index = data.index;      // number of this data；\n  \n   if (end == EndStatusNone){\n       NSLog(@"there is no data.");\n   }\n   else if (end == EndStatusSuccess) {\n       NSLog(@"sensor data sync successfully!");\n   }\n   else if (end == EndStatusError) {\n       NSLog(@"something wrong in syncing progress.");   \n   }\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("you can vividly display these data with the curve, table or other.")]),e._v(" "),n("h5",{attrs:{id:"set-triggers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-triggers","aria-hidden":"true"}},[e._v("#")]),e._v(" Set triggers")]),e._v(" "),n("p",[e._v("BeaconPlus device has triggers, you can set triggers for every slot, the device will advertise the corresponding slot only when the trigger condition is met.")]),e._v(" "),n("p",[e._v("Please refer to the code example below.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n   aConnectionHandler: a MTConnectionHandler instance\n*/\n\nNSInteger sn = 2;                          // Target slot：2\nTriggerType type = TriggerTypeTempAbove;   // Triggering condition：temperature above\nNSInteger value = 10;                      // value：10\n\n// create a trigger instance\n// this trigger means when temperature > 10 meet the condition.\nMTTriggerData *trigger = [[MTTriggerData alloc]initWithSlot:sn triggerType:type value:value];\n\n// write to the device.\n[aConnectionHandler writeTrigger:trigger completion:^(BOOL success, NSError){\n    if(success){\n        NSLog(@"write trigger successfully!");\n    }\n    else {\n        NSLog(@"write trigger failed!");\n    }\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v("At the end of this part, you can refer all code above to develop. Of course we made a note for every APi in the SDK, if there is something new, we will update this document.")]),e._v(" "),n("h2",{attrs:{id:"notes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notes","aria-hidden":"true"}},[e._v("#")]),e._v(" Notes")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("In development progress, you may find there are "),n("strong",[e._v("multiple MTPeripheral instance")]),e._v(" correspond to a physical device. On this point, we consulted Apple's engineers. they told us that currently on the iOS platform, CoreBluetooth framework  unfriendly to the multiple slot devices(especially the advertisement data in changing). due to that sometimes app can't connect to the device, Google Eddystone solve this issue by "),n("strong",[e._v("press button on eddystone devices")]),e._v(", our device support this operation too.")]),e._v(" "),n("p",[e._v("iOS11 doesn't has this issue.")])]),e._v(" "),n("li",[n("p",[e._v("In scanning stage, some properties may nil, especially MAC address(restriction of iOS),if current device advertise "),n("strong",[e._v("DeviceInfo")]),e._v(" frame, then you can get name, MAC address and battery.")])]),e._v(" "),n("li",[n("p",[e._v("After 5 minus the app connected to device, the device will take the initiative to disconnect.")])])]),e._v(" "),n("h2",{attrs:{id:"change-log"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-log","aria-hidden":"true"}},[e._v("#")]),e._v(" Change log")]),e._v(" "),n("ul",[n("li",[e._v("2017.10.11  v1.0 first version;")])])])}],t=s(0),r=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);r.options.__file="iOS_BeaconPlus_Software_Development_Kit_Guide.md";a.default=r.exports}}]);