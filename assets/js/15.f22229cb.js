(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{228:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"minewkeyfinder-software-development-kit-guide-for-ios"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minewkeyfinder-software-development-kit-guide-for-ios","aria-hidden":"true"}},[e._v("#")]),e._v(" MinewKeyfinder Software Development Kit Guide for iOS")]),e._v(" "),t("h3",{attrs:{id:"prepare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prepare","aria-hidden":"true"}},[e._v("#")]),e._v(" Prepare")]),e._v(" "),t("p",[e._v("Cocoa Frameworks this SDK using: CoreLocation（record the location information when device disconnected）/CoreBluetooth（using for communication between iPhone and devices）。")]),e._v(" "),t("p",[e._v("you need to add the code to info.plist of your project:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  \x3c!-- Bluetooth --\x3e \n<key>NSBluetoothPeripheralUsageDescription</key> \n<string>App need bluetooth.</string> \n  \x3c!-- location --\x3e \n<key>NSLocationUsageDescription</key> \n<string>App need location information.</string> \n\x3c!-- get location while using --\x3e \n<key>NSLocationWhenInUseUsageDescription</key> \n<string>App need location information.</string> \n  \n\x3c!-- always get location. --\x3e \n<key>NSLocationAlwaysUsageDescription</key> \n<string>App need location information.</string> \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("open the background permission as follows:")]),e._v(" "),t("p",[e._v('Target -> Your Project -> Capabilities -> Background Modes, check "Location updates" and "Uses Bluetooth LE accessories"')]),e._v(" "),t("h3",{attrs:{id:"get-started"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-started","aria-hidden":"true"}},[e._v("#")]),e._v(" Get Started")]),e._v(" "),t("h4",{attrs:{id:"device-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device-manager","aria-hidden":"true"}},[e._v("#")]),e._v(" Device manager")]),e._v(" "),t("p",[e._v("MinewDeviceManager（as Manager）is a shared instance Manager Class, it can scan / connect to / bind devices, at the same time, it also listen the changes of device connection.")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("init Manager, set a delegate:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("MinewDeviceManager *manager = [MinewDeviceManager sharedInstance];\nmanager.delegate = self;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("start scan, find devices around:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[manager startScan];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])])]),e._v(" "),t("p",[e._v("the manager will create instances for every device when it scanned devices around, there are 3 delegate methods call back for events and status.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// when the manager find devices, this method will be executed.\n- (void)manager:(MinewDeviceManager *)manager didScanDevices:(NSArray <MinewDevice *>*)devices;\n\n// when device disappear this method will be executed.(PS: if a device doesn\'t been scanned for 10 seconds, we think it "disappeared".)\n- (void)manager:(MinewDeviceManager *)manager disappearDevices:(NSArray<MinewDevice *> *)devices;\n\n// when device appear this method will be executed.(PS: only for the first scanned devices.)\n- (void)manager:(MinewDeviceManager *)manager appearDevices:(NSArray <MinewDevice *> *)devices;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v('Certainly, the develop can get devices from the "scannedDevices" property of manager.')]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("NSArray *devices = manager.scannedDevices;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("bind device:")])]),e._v(" "),t("p",[e._v("The manger only update data of bind devices, especially in connection stage.you can bind a device like the code below:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[manager bind:aDevice];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("At same time, the developer can get all bind devices in this way:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("NSArray *bindDevices = manager.bindDevices;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("connect to a device：")])]),e._v(" "),t("p",[e._v("Connect to device via manager, you can listen the status or event changes of device from delegate method.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// connect to device\n[manager connect:aDevice];\nmanager.delegate = "you delegate"\n\n// the methond will be executed when device connection state changes.\n- (void)manager:(MinewDeviceManager *)manager didDevice:(MinewDevice *)device updateLinkState:(DeviceLinkState)state;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("the manager update data of devices by delegate method, it's only for bind devices.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// when data changes of bind devices, this method will be executed.\n- (void)manager:(MinewDeviceManager *)manager didUpdateBindDevice:(NSArray <MinewDevice *>*)devices;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h3",{attrs:{id:"working-switch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#working-switch","aria-hidden":"true"}},[e._v("#")]),e._v(" Working switch")]),e._v(" "),t("p",[e._v("from ver2.1.1, the SDK has a switch, you can disable the SDK module for stoping manager's work.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@property (nonatomic, assign) BOOL disableAutoProcessing;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("the default value of this property is NO, if you need stop the SDK from working, just set it to YES, this will take effect immediately.")]),e._v(" "),t("p",[e._v("the default value of this property is "),t("strong",[e._v("NO")]),e._v(", if you want stoping autoProccessing, just set it to "),t("strong",[e._v("YES")]),e._v(", it will take effective immediately. It is worth noting that you can't bind devices when disable autoProcessing(there is example code in Demo).")]),e._v(" "),t("h4",{attrs:{id:"device"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device","aria-hidden":"true"}},[e._v("#")]),e._v(" Device")]),e._v(" "),t("p",[e._v("This SDK create MinewDevice instance for every physical device, each instance contains information, operation methods and call backs for device.")]),e._v(" "),t("p",[e._v("Currently, you can get device information by key-value(like dictionary). refer to the code below:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// get value instance of MAC,\nMinewValue *value = [aDevice getValue:ValueIndex_MacAddress];\n\n// get MAC address string.\nNSString *macString = value.stringValue;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v('You may notice that the " -(MinewDeviceValue *)getValue:(ValueIndex)index" method will return a '),t("strong",[e._v("MinewValue")]),e._v(" (as value below) instance, value isntance is a package of mutilple types, such as int, float, string and etc. more detailed explanation later.")]),e._v(" "),t("p",[e._v("you can refer to the code below about change values of device.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// init a MinewValue instance.\nMinewValue *value = [MinewValue index:ValueIndex_Name value:@"Awesome"];\n// set device\'s name\n[aDevice setValue:value];\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("if you want to change a bool / int / float type, please refer the code below:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// set the delay alarm property \nMinewValue *delayValue = [MinewValue index:ValueIndex_AlarmDelay value:@(5.f)];\n[aDevice setValue:delayValue];\n\n// set alarm or not when disconnected.\nMinewValue *loseAlertValue = [MinewValue index:ValueIndex_DeviceLoseAlert value:@(YES)] ;\n[aDevice setValue:loseAlertValue];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("we offer some instructions for control features of device. such as search device(the device will ring when receive the instruction)")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[aDevice sendInstruction:InstrucIndex_Search];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("When instructions sent, you can get the result by call backs.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// this callback tells the instruction is sent successful or not,\n- (void)didSendInstruction:(InstrucIndex)index toDevice:(MinewDevice *)device result:(BOOL)success;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("At the same time, some events are passive, such as the device sends a instruction to app, but we don't know when it happens. we can listen these events like this:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// index is a item from "InstrucIndex" list\n- (void)didReceiveInstruction:(InstrucIndex)index fromDevice:(MinewDevice *)device;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("OK, Start to develop now, we provided a demo code, you can encapsulate MinewDeviceManager and MinewDevice in order to accept every event callback accurately. More details, please refer to the demo.")]),e._v(" "),t("p",[e._v("##Details about MinewDeviceValue\nget values like this,")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// device name\nNSString *name = aDeviceNameValue.stringValue\n// device battery\nNSInteger battery = aDeviceBatteryValue.intValue;\n// bind state\nBOOL bind = aDeviceBindValue.boolValue;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("DeviceValue contains multiple types, you can refer to the code below.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// index in "ValueIndex" list\n@property (nonatomic, readonly, assign) ValueIndex index;\n\n// get int value\n@property (nonatomic, readonly, assign) NSInteger intValue;\n\n// get float value\n@property (nonatomic, readonly, assign) float floatValue;\n\n// get string value\n@property (nonatomic, readonly, copy) NSString *stringValue;\n\n// get data value\n@property (nonatomic, readonly, strong) NSData  *dataValue;\n\n// get bool value\n@property (nonatomic, readonly, assign) BOOL boolValue;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[e._v("If you want to change a value, please init a value instance.")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' // init a value instance\n+ (MinewDeviceValue *)index:(ValueIndex)index value:(id)value;\n\n // create a name instance\n MinewDeviceValue *nameValue = [MinewDeviceValue index:ValueIndex_Name value:@"手机"];\n \n// create a device mode instance\n MinewDeviceValue *modeValue = [MinewDeviceValue index:ValueIndex_Mode value:@2];\n  \n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[e._v("PS: int / float / bool values should be convert to "),t("strong",[e._v("NSNumber")]),e._v(", such as @(10), @(12.3), @(YES)")]),e._v(" "),t("p",[e._v("At the same time, you should to known, not all the properties can be modified, please refer the table below:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Device Properties")]),e._v(" "),t("th",[e._v("detail")]),e._v(" "),t("th",[e._v("datatype")]),e._v(" "),t("th",[e._v("Read/write")]),e._v(" "),t("th",[e._v("More")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("ValueIndex_Name")]),e._v(" "),t("td",[e._v("Name")]),e._v(" "),t("td",[e._v("stringValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_HeadImage")]),e._v(" "),t("td",[e._v("Head image")]),e._v(" "),t("td",[e._v("dataValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_DeviceId")]),e._v(" "),t("td",[e._v("Device id")]),e._v(" "),t("td",[e._v("stringValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td",[e._v("Bluetooth name.")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_MacAddress")]),e._v(" "),t("td",[e._v("MAC address")]),e._v(" "),t("td",[e._v("stringValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Rssi")]),e._v(" "),t("td",[e._v("RSSI")]),e._v(" "),t("td",[e._v("intValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Mode")]),e._v(" "),t("td",[e._v("Mode")]),e._v(" "),t("td",[e._v("intValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Distance")]),e._v(" "),t("td",[e._v("Distance")]),e._v(" "),t("td",[e._v("floatValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Battery")]),e._v(" "),t("td",[e._v("Battery")]),e._v(" "),t("td",[e._v("intValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Bind")]),e._v(" "),t("td",[e._v("Bind state")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_DisappearTime")]),e._v(" "),t("td",[e._v("Disconnect time")]),e._v(" "),t("td",[e._v("stringValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td",[e._v("Format：yyyy-MM-dd hh:mm:ss")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_DisappearLong")]),e._v(" "),t("td",[e._v("Disconnect longitude")]),e._v(" "),t("td",[e._v("floatValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_DisappearLati")]),e._v(" "),t("td",[e._v("Disconnect latitude")]),e._v(" "),t("td",[e._v("floatValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Connected")]),e._v(" "),t("td",[e._v("Connection State")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_DeviceLoseAlert")]),e._v(" "),t("td",[e._v("Device Alert")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td",[e._v("device will alarm or not when disconnect.")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_Search")]),e._v(" "),t("td",[e._v("Searching")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td",[e._v("searching this device or not.")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_AppLoseAlert")]),e._v(" "),t("td",[e._v("App Alert")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td",[e._v("app will alarm or not when disconnect.")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_FeatureSupport")]),e._v(" "),t("td",[e._v("feature support")]),e._v(" "),t("td",[e._v("boolValue")]),e._v(" "),t("td",[e._v("R")]),e._v(" "),t("td",[e._v("If the device supports distance adjustment or delayed alarm adjustment, it's YES")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_AlarmDistance")]),e._v(" "),t("td",[e._v("Alarm distance")]),e._v(" "),t("td",[e._v("intValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td",[e._v("1 - 8, 8  levels, from near to far （when featuresupport is YES）")])]),e._v(" "),t("tr",[t("td",[e._v("ValueIndex_AlarmDelay")]),e._v(" "),t("td",[e._v("Alarm delay.")]),e._v(" "),t("td",[e._v("intValue")]),e._v(" "),t("td",[e._v("R/W")]),e._v(" "),t("td",[e._v("0 - 8 seconds.(when featuresupport is YES)")])])])]),e._v(" "),t("h2",{attrs:{id:"changelog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v(" ChangeLog")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("2017.10.16  english version;\n2017.4.24   update some text description；\n2017.4.19   working switch；\n2017.1.3    new feature and permission；\n2016.9.12   first version;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("​")]),e._v(" "),t("p",[e._v("​")])])}],!1,null,null,null);s.options.__file="iOS_Keyfinder_Software_Development_Kit_Guide.md";a.default=s.exports}}]);