(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{237:function(e,a,n){"use strict";n.r(a);var t=n(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"minewkeyfinder-android-software-development-kit-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#minewkeyfinder-android-software-development-kit-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" MinewKeyfinder Android Software Development Kit Guide")]),e._v(" "),n("p",[e._v("Android Studio Settings:")]),e._v(" "),n("p",[e._v("targetSdkVersion Version choose 21")]),e._v(" "),n("p",[e._v("Place the minewBeaconScan.jar into the libs folder, and then in the current project under the build.gradle file configuration items in the dependencies new content, as follows compile files ('libs / minewBeaconScan.jar').")]),e._v(" "),n("p",[e._v("Eclipse Settings:")]),e._v(" "),n("p",[e._v("targetSdkVersion Version choose 21")]),e._v(" "),n("p",[e._v("Place the scanBeacon.jar into  the libs folder, right-click the project propeties, select Java build Path, add the minewBeaconScan.jar dependency in the Library option.")]),e._v(" "),n("p",[e._v("When the targetSdkVersion version is greater than or equal to 23, the need for dynamic application permissions.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("Permissions required for SDK:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>\n<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>\n<uses-permission android:name="android.permission.MEDIA_CONTENT_CONTROL"/>\n<uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>\n<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>\n<uses-permission android:name="android.permission.RECORD_AUDIO"/>\n<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n<uses-permission android:name="android.permission.INTERNET"/>\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n<uses-permission android:name="android.permission.BLUETOOTH"/>\n<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("The corresponding component registration under the AndroidManifest.xml file. As follows:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<service android:name="com.minew.device.service.ConnectService"/>\n<receiver android:name="com.minew.device.BluetoothChangedReceiver">\n        <intent-filter>\n            <action android:name="android.bluetooth.adapter.action.STATE_CHANGED"/>\n        </intent-filter>\n</receiver>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("AndroidStudio build.gradle add rely:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("dependencies {\n  testCompile 'junit:junit:4.12'\n  compile 'com.android.support:appcompat-v7:23.4.0'\n  compile 'com.android.support:recyclerview-v7:23.3.0'\n  compile 'com.google.code.gson:gson:2.2.4'\n  compile 'org.greenrobot:eventbus:3.0.0'\n  compile files('libs/minewDevice.jar')\n  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("More details，refer demo code.")]),e._v(" "),n("p",[e._v("The MinewKeyFinder SDK provides three classes to obtain anti-lost information and management of the anti-lost device. MinewDeviceManager is the management of all devices. MinewDevice is the device instance class. MinewDeviceValue is the device information data class. Please refer to the corresponding section for details of each class. Be careful not to stop scanning, only when you determine all the devices has been connected to stop scanning. When the device is disconnected you must start scan, or can not be re-connected.")]),e._v(" "),n("h3",{attrs:{id:"get-started"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-started","aria-hidden":"true"}},[e._v("#")]),e._v(" Get Started")]),e._v(" "),n("h4",{attrs:{id:"device-manager"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#device-manager","aria-hidden":"true"}},[e._v("#")]),e._v(" Device manager")]),e._v(" "),n("p",[e._v("MinewDeviceManager（as Manager）is a shared instance Manager Class, it can scan / connect to / bind devices, at the same time, it also listen the changes of device connection.")]),e._v(" "),n("p",[e._v("1.init Manager, set a callback:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("MinewDeviceManager manager = MinewDeviceManager.getInstance(this);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("2.start scan, find devices around:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" manager.startScan();\n     PS：If the user turns off the Bluetooth, you can listen to MinewDeviceManagerListener callback method to obtain the state change.\n     \n manager.setMinewDeviceManagerListener(MinewDeviceManagerListener minewDeviceManagerListener);\n\t\n void onUpdateBluetoothState:(BluetoothState state){}   \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("the manager will create instances for every device when it scanned devices around, there are 3 methods call back for events and status.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// when the manager find devices, this method will be executed.\n void onScanDevices(List<MinewDevice> devices);\n\n// when device disappear this method will be executed.(PS: if a device doesn\'t been scanned for 10 seconds, we think it "disappeared".)\n void onDisappearDevices(List<MinewDevice> devices);\n\n// when device appear this method will be executed.(PS: only for the first scanned devices.)\n void onAppearDevices(List<MinewDevice> devices);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v('Certainly, the develop can get devices from the "scannedDevices" property of manager.')]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("List<MinewDevice> allDevices = MinewDeviceManager.scannedDevices;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("3.bind device:")]),e._v(" "),n("p",[e._v("The manger only update data of bind devices, especially in connection stage.you can bind a device like the code below:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("manager.bind(minewDevice);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("At same time, the developer can get all bind devices in this way:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("List<MinewDevice> allBindDevices = MinewDeviceManager.bindDevices;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("4.connect to a device:")]),e._v(" "),n("p",[e._v("Connect to device via manager, you can listen the status or event changes of device from delegate method.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("manager.connect(minewDevice);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("the methond will be executed when device connection state changes.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// the methond will be executed when device connection state changes.\n- void onDeviceChangeStatus(MinewDevice device,DeviceLinkStatus status);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("the manager update data of devices by delegate method, it's only for bind devices.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// when data changes of bind devices, this method will be executed.\n void onUpdateBindDevice:(List<MinewDevice> device);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h3",{attrs:{id:"working-switch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#working-switch","aria-hidden":"true"}},[e._v("#")]),e._v(" Working switch")]),e._v(" "),n("p",[e._v("from ver2.1.1, the SDK has a switch, you can disable the SDK module for stoping manager's work.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private boolean disableAutoProcessing;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("the default value of this property is false, if you need stop the SDK from working, just set it to true, this will take effect immediately.")]),e._v(" "),n("p",[e._v("the default value of this property is "),n("strong",[e._v("false")]),e._v(", if you want stoping autoProccessing, just set it to "),n("strong",[e._v("true")]),e._v(", it will take effective immediately. It is worth noting that you can't bind devices when disable autoProcessing(there is example code in Demo).")]),e._v(" "),n("h4",{attrs:{id:"device"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#device","aria-hidden":"true"}},[e._v("#")]),e._v(" Device")]),e._v(" "),n("p",[e._v("This SDK create MinewDevice instance for every physical device, each instance contains information, operation methods and call backs for device.")]),e._v(" "),n("p",[e._v("Currently, you can get device information by key-value(like map). refer to the code below:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// get value instance of MAC,\nMinewDeviceValue value = minewDevice.getValue(ValueIndex.ValueIndex_MacAddress)；\n\n// get MAC address string.\nString macAddress = value.getStringValue;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v('You may notice that the " -minewDevice.getValue(ValueIndex.ValueIndex_MacAddress)" method will return a '),n("strong",[e._v("MinewValue")]),e._v(" (as value below) instance, value isntance is a package of mutilple types, such as int, float, string and etc. more detailed explanation later.")]),e._v(" "),n("p",[e._v("you can refer to the code below about change values of device.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// init a MinewValue instance.\nMinewDeviceValue value = MinewDeviceValue.index(ValueIndex.ValueIndex_Connected, true);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("if you want to change a bool / int / float type, please refer the code below:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//set the delay alarm property \nminewDevice.setValue(MinewDeviceValue.index(ValueIndex.ValueIndex_AlarmDelay, deleyValue));\n\n// set alarm or not when disconnected.\nminewDevice.setValue(MinewDeviceValue.index(ValueIndex.ValueIndex_DeviceLoseAlert, loseAlert));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("we offer some instructions for control features of device. such as search device(the device will ring when receive the instruction)")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("minewDevice.sendInstruction(InstrucIndex_Search);\t\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("When instructions sent, you can get the result by call backs.")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// this callback tells the instruction is sent successful or not\n void onSendData(MinewDevice minewDevice, InstrucIndex index, boolean success);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("At the same time, some events are passive, such as the device sends a instruction to app, but we don't know when it happens. we can listen these events like this:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// index is a item from "InstrucIndex" list\n void onReceiveInstructionfromDevice(InstrucIndex index, MinewDevice device);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("OK, Start to develop now, we provided a demo code, you can encapsulate MinewDeviceManager and MinewDevice in order to accept every event callback accurately. More details, please refer to the demo.")]),e._v(" "),n("h2",{attrs:{id:"details-about-minewdevicevalue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#details-about-minewdevicevalue","aria-hidden":"true"}},[e._v("#")]),e._v(" Details about MinewDeviceValue")]),e._v(" "),n("p",[e._v("get values like this,")]),e._v(" "),n("pre",[n("code",[e._v(" device name：String name = aDeviceValue.stringValue\n battery：int battery = aDeviceValue.intValue;\n bind state：boolean bind = aDeviceValue.boolValue;\n")])]),e._v(" "),n("p",[e._v("DeviceValue contains multiple types, you can refer to the code below.")]),e._v(" "),n("pre",[n("code",[e._v('// index in "ValueIndex" list\npirvate ValueIndex index;\n\n// get int value\nprivate int intValue;\n\n// get float value\nprivate float floatValue;\n\n// get string value\nprivate String stringValue;\n\n// get byte[] value\nprivate byte[] dataValue;\n\n// get boolean value\nprivate boolean boolValue;\n')])]),e._v(" "),n("p",[e._v("If you want to change a value, please init a value instance.")]),e._v(" "),n("pre",[n("code",[e._v(' // init a value instance\n public <T> MinewDeviceValue index(ValueIndex index, T t){}\n\n // create a name instance\n MinewDeviceValue nameValue = MinewDeviceValue.index(ValueIndex_Name,"phone");\n \n // create a device mode instance\n MinewDeviceValue modeValue = MinewDeviceValue.index(ValueIndex_Mode,2);\n')])]),e._v(" "),n("p",[e._v("At the same time, you should to known, not all the properties can be modified, please refer the table below:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Device Properties")]),e._v(" "),n("th",[e._v("detail")]),e._v(" "),n("th",[e._v("datatype")]),e._v(" "),n("th",[e._v("Read/write")]),e._v(" "),n("th",[e._v("More")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("ValueIndex_Name")]),e._v(" "),n("td",[e._v("Name")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_HeadImage")]),e._v(" "),n("td",[e._v("Head image")]),e._v(" "),n("td",[e._v("dataValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DeviceId")]),e._v(" "),n("td",[e._v("Device id")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td",[e._v("Bluetooth name.")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_MacAddress")]),e._v(" "),n("td",[e._v("Mac address")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Rssi")]),e._v(" "),n("td",[e._v("Rssi")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Mode")]),e._v(" "),n("td",[e._v("Mode")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Distance")]),e._v(" "),n("td",[e._v("Distance")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Battery")]),e._v(" "),n("td",[e._v("Battery")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Bind")]),e._v(" "),n("td",[e._v("Bind state")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearTime")]),e._v(" "),n("td",[e._v("Disconnect time")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td",[e._v("Format:yyyy-MM-dd hh:mm:ss")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearLong")]),e._v(" "),n("td",[e._v("Disconnect longitude")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearLati")]),e._v(" "),n("td",[e._v("Disconnect latitude")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Connected")]),e._v(" "),n("td",[e._v("Connection state")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DeviceLoseAlert")]),e._v(" "),n("td",[e._v("Device alert")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td",[e._v("device will alarm or not when disconnect.")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Search")]),e._v(" "),n("td",[e._v("Search")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td",[e._v("searching this device or not.")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AppLoseAlert")]),e._v(" "),n("td",[e._v("App Alert")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td",[e._v("app will alarm or not when disconnect.")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_FeatureSupport")]),e._v(" "),n("td",[e._v("feature support")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("R")]),e._v(" "),n("td",[e._v("If the device supports distance adjustment or delayed alarm adjustment, it's true.")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AlarmDistance")]),e._v(" "),n("td",[e._v("Alarm distance")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td",[e._v("1 - 8, 8  levels, from near to far （when featuresupport is true）")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AlarmDelay")]),e._v(" "),n("td",[e._v("Alarm delay.")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("R/W")]),e._v(" "),n("td",[e._v("0 - 8 seconds.(when featuresupport is true)")])])])]),e._v(" "),n("h2",{attrs:{id:"changelog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v(" ChangeLog")]),e._v(" "),n("pre",[n("code",[e._v("2017.4.26   update some text description;\n2017.4.20   working switch;\n2017.1.6    new feature and permission;\n2016.9.12   first version;\n")])]),e._v(" "),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("​")])])}],!1,null,null,null);s.options.__file="Android_Keyfinder_Software_Development_Kit_Guide.md";a.default=s.exports}}]);