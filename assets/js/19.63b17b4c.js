(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{239:function(n,e,a){"use strict";a.r(e);var s=a(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"minewbeaconadmin-android-开发套件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconadmin-android-开发套件","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconAdmin Android 开发套件")]),n._v(" "),a("h1",{attrs:{id:"新建工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建工程","aria-hidden":"true"}},[n._v("#")]),n._v(" 新建工程")]),n._v(" "),a("p",[n._v("Android Studio配置")]),n._v(" "),a("p",[n._v("targetSdkVersion版本选择 21\n将minewBeaconAdmin.jar包放入道libs文件夹下,然后在当前工程下的build.gradle文件配置项中的dependencies新增内容,如下compile files('libs/minewBeaconAdmin.jar')")]),n._v(" "),a("p",[n._v("Eclipse配置")]),n._v(" "),a("p",[n._v("targetSdkVersion版本选择 21\n将minewBeaconAdmin.jar包放入道libs文件夹下,右击工程propeties,选择Java build Path，在Library选项中添加minewDevice依赖关系")]),n._v(" "),a("p",[n._v("targetSdkVersion版本大于等于23时，需要动态申请权限:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("当前SDK需要的权限：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<uses-permission android:name="android.permission.BLUETOOTH"/>\n<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("添加service和receiver,如下")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\t<service android:name="com.minew.beaconset.ConnectService"/>\n\t    <receiver android:name="com.minew.beaconset.BluetoothChangedReceiver">\n\t        <intent-filter>\n\t            <action android:name="android.bluetooth.adapter.action.STATE_CHANGED"/>\n\t        </intent-filter>\n\t    </receiver>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("AndroidStudio build.gradle 添加如下依赖：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("dependencies {\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.3.0'\n    compile 'com.android.support:recyclerview-v7:23.3.0'\n    compile 'org.greenrobot:eventbus:3.0.0'\n    compile 'com.google.code.gson:gson:2.2.4'\n    compile files('libs/minewBeaconAdmin.jar')\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("你可以使用此SDK对周围的Beacon进行诸如：uuid，major，minor等等参数配置。当前使用四个类实现这部分功能。")]),n._v(" "),a("h2",{attrs:{id:"类概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类概述","aria-hidden":"true"}},[n._v("#")]),n._v(" 类概述")]),n._v(" "),a("h3",{attrs:{id:"minewbeaconmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconmanager","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconManager")]),n._v(" "),a("p",[n._v("用于扫描设备的管理类；")]),n._v(" "),a("p",[n._v("功能：")]),n._v(" "),a("ol",[a("li",[n._v("发起扫描／停止扫描；")]),n._v(" "),a("li",[n._v("获取当前扫描范围内设备／获取全部扫描过的设备；")]),n._v(" "),a("li",[n._v("获取当前蓝牙状态；")]),n._v(" "),a("li",[n._v("监听设备进出状态（代理回调）；")]),n._v(" "),a("li",[n._v("更新扫描到设备的数据（代理回调）；")]),n._v(" "),a("li",[n._v("监听蓝牙状态改变（代理回调）；")]),n._v(" "),a("li",[n._v("开启/关闭连接服务；")])]),n._v(" "),a("h3",{attrs:{id:"minewbeacon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minewbeacon","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeacon")]),n._v(" "),a("p",[n._v("扫描到设备的数据模型类")]),n._v(" "),a("p",[n._v("此类所有属性均为只读，底层将会周期性更新每个设备的最新数据（如果它没有离开扫描范围的话）。")]),n._v(" "),a("p",[n._v("功能：")]),n._v(" "),a("ol",[a("li",[n._v("导出设备数据为JSON字符串；")]),n._v(" "),a("li",[n._v("支持导入JSON字符串；")])]),n._v(" "),a("h3",{attrs:{id:"minewbeaconconnection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconconnection","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconConnection")]),n._v(" "),a("p",[n._v("设备与iPhone之间连接状态以及数据更新的维护类")]),n._v(" "),a("p",[n._v("每一个此类实例都对应一个MinewBeacon和MinewBeaconSetting（连接状态下）实例。")]),n._v(" "),a("p",[n._v("功能：")]),n._v(" "),a("ol",[a("li",[n._v("连接到某个设备／断开与某个设备的连接")]),n._v(" "),a("li",[n._v("更新属性“MinewBeaconSetting”的改动到设备（回调方法返回是否成功更新）")])]),n._v(" "),a("h3",{attrs:{id:"minewbeaconsetting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconsetting","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconSetting")]),n._v(" "),a("p",[n._v("连接到设备后的数据模型")]),n._v(" "),a("p",[n._v("此类只能在Connection实例发起连接并且连接成功后获取，部分属性可修改，修改后会临时缓存，只有通过Connection实例成功更新到设备改动才会生效。")]),n._v(" "),a("p",[n._v("功能：")]),n._v(" "),a("ol",[a("li",[n._v("导出数据为JSON字符串；")]),n._v(" "),a("li",[n._v("导入JSON字符串；")])]),n._v(" "),a("h2",{attrs:{id:"使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 使用方法")]),n._v(" "),a("h3",{attrs:{id:"扫描设备部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扫描设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 扫描设备部分")]),n._v(" "),a("p",[n._v("MinewbeaconManager管理类来发起扫描，SDK会为扫描到的设备生成MinewBeacon实例；")]),n._v(" "),a("div",{staticClass:"language-android line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// 1.获取MinewBeaconManager实例，设置代理对象\nMinewBeaconManager mMinewBeaconManager = MinewBeaconManager.getInstance(this);\n//设置回调监听\nmMinewBeaconManager.setMinewbeaconManagerListener(new MinewBeaconManagerListener() {});\n\n//2.开启连接服务\nmMinewBeaconManager.startService();\n\n// 3.发起扫描\nmMinewBeaconManager.startScan();\n\n// 4.通过代理方法获取扫描数据更新\n// 此方法定时回调用于获取周围设备的最新扫描数据\n- void onRangeBeacons(List<MinewBeacon> beacons);\n\n\n\n/* 如果要监听设备的进出状态，可以通过实现以下方法 */\n\n// 监听消失设备\n- void onDisappearBeacons(List<MinewBeacon> beacons);\n\n// 监听新发现的设备\n- void onAppearBeacons(List<MinewBeacon> beacons);\n\n/* 还可以监听蓝牙的状态改变 */\n// 蓝牙状态：已开启，已关闭，未知\n// 仅在蓝牙已开启状态下才可以正常工作\n- void onUpdateBluetoothState(BluetoothState state);\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br")])]),a("h3",{attrs:{id:"连接设备部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 连接设备部分")]),n._v(" "),a("p",[n._v("如果要连接设备，需要用扫描获取到的MinewBeacon实例来生成一个MinewBeaconConnection实例，通过Connection来管理连接／断开／更新数据等。")]),n._v(" "),a("div",{staticClass:"language-android line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 1. 使用一个MinewBeacon实例生成Connection实例，设置回调监听\nMinewBeaconConnection minewBeaconConnection = new MinewBeaconConnection(context, minewBeacon);\nminewBeaconConnection.setMinewBeaconConnectionListener(minewBeaconConnectionListener);\n               \n// 2. 连接设备\n minewBeaconConnection.connect();\n\n// 3.通过代理方法获取连接状态\n- void onChangeState(MinewBeaconConnection connection, ConnectionState state);\n{\n  // 当连接成功后，connection实例的MinewBeaconSetting属性不再为空，这个MinewBeaconSetting实例就是从设备上获取到的数据信息\n  switch (state) {\n                case BeaconStatus_Connected:\n                   minewBeaconConnection.setting.getMajor();\n                    break;\n                case BeaconStatus_ConnectFailed:\n                case BeaconStatus_Disconnect:\n                    break;\n            }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("h3",{attrs:{id:"配置设备部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 配置设备部分")]),n._v(" "),a("p",[n._v("在connection的状态为已连接时，可以修改其属性setting的所有非只读属性，修改完毕只需执行更新方法即可将改动更新到Beacon设备，通过代理方法可以知道是否已经成功更新。")]),n._v(" "),a("div",{staticClass:"language-android line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 1.修改connection的setting属性\nMinewbeaconSetting mMinewBeaconSetting = minewBeaconConnection.setting;\nmMinewBeaconSetting.setUuid("FDA50693A4E24FB1AFCFC6EB07647825");\n\n/*.....*/\n\n// 2.更新改动到设备\n// 需要注意的是，这里的参数是Beacon设备的当前重启密码；\nmMinewBeaconConnection.writeSetting("minew123");\n\n// 3.通过代理方法获取是否成功更新改动到设备\n- void onWriteSettings(MinewBeaconConnection connection, final boolean success) {\n   if (success) {\n               Toast.makeText(getApplicationContext(), "配置成功", Toast.LENGTH_SHORT).show();\n           } else {\n              Toast.makeText(getApplicationContext(), "配置失败", Toast.LENGTH_SHORT).show();\n                }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("更多细节，详见Demo。")])])}],!1,null,null,null);i.options.__file="Android_BeaconAdmin_Software_Development_Kit_Guide.md";e.default=i.exports}}]);