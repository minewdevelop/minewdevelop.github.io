(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{181:function(e,s,a){e.exports=a.p+"assets/img/design.48a5b3ec.png"},182:function(e,s,a){e.exports=a.p+"assets/img/addframework.0b887314.png"},183:function(e,s,a){e.exports=a.p+"assets/img/frameworkadded.219650ea.png"},184:function(e,s,a){e.exports=a.p+"assets/img/bluetoothbackground.f0d91607.png"},185:function(e,s,a){e.exports=a.p+"assets/img/bluetoothdescription.7ceeb2e7.png"},210:function(e,s,a){"use strict";a.r(s);var n=[function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"minewtrackerkit-development-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#minewtrackerkit-development-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" MinewTrackerKit Development Guide")]),e._v(" "),n("p",[e._v("This SDK only support Minew Trackers base on nordic52 chips, it incompatible with previous trackers based on nordic51 chips. please read this document carefully in order to start developing as soon as possible.")]),e._v(" "),n("p",[n("strong",[e._v('Compatibility instructions:  If you have used "MinewFinderSDK" before, the MinewFinder and MinewTrackerKit are not compatible with each other, please don\'t use them in the same project.')])]),e._v(" "),n("h3",{attrs:{id:"preparations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#preparations","aria-hidden":"true"}},[e._v("#")]),e._v(" Preparations")]),e._v(" "),n("p",[e._v("This SDK is similar to the MinewFinde. We update a new encryption and Increased stability, The performance is much higher than trackers based on nordic51 chips.")]),e._v(" "),n("p",[e._v("MTTrackerManager is a class for device managing, it's a shared instance in the APP run time, this SDK will create a MTTracker instance for every device, you can use them for operating and listening devices.")]),e._v(" "),n("p",[e._v("The design ideas:")]),e._v(" "),n("p",[n("img",{attrs:{src:a(181),alt:"设计说明"}})]),e._v(" "),n("p",[e._v("*MTTrackerManager：*device managing class, it can scan devices around and connect to them, validate trackers.")]),e._v(" "),n("p",[e._v("MTTracker：the tracker class, the manager will generate a instance for every physical tracker device.")]),e._v(" "),n("h3",{attrs:{id:"get-started"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-started","aria-hidden":"true"}},[e._v("#")]),e._v(" Get started")]),e._v(" "),n("p",[e._v("environment:")]),e._v(" "),n("ul",[n("li",[e._v("Xcode9+, the SDK is compiled by xcode9, please use Xcode9 or high to develop APPs.")]),e._v(" "),n("li",[e._v("iOS8, the lowest iOS version is 8.")])]),e._v(" "),n("h5",{attrs:{id:"import-the-framework："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-the-framework：","aria-hidden":"true"}},[e._v("#")]),e._v(" import the framework：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v('import the framework file "MTTrackit.framework" to your project, the target is current project.')]),e._v(" "),n("p",[n("img",{attrs:{src:a(182),alt:"添加framework"}})])])]),e._v(" "),n("p",[e._v('"Target" -> General -> Embedded Binaries, click the "+" button below, then click "Add Other", choose "MTTrackit.framework"(as the screenshot above). at the same time, you should add the file to "Linked Frameworks and Libraries", as the screenshot below.')]),e._v(" "),n("p",[n("img",{attrs:{src:a(183),alt:"frameworkadded"}})]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("The APP should handle the tracker's event , so we should switch on the background ble permission. as the screenshot below:")])]),e._v(" "),n("p",[n("img",{attrs:{src:a(184),alt:""}})]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v('*if you use the swift programming language, you need add an Objective C BridgingHead .h file (please solve it by yourself) , import framework in this .h file. if you use Objective C, add "import" at the beginning of the code.')]),e._v(" "),n("li",[e._v("!!! on the iOS10 and above version, we should add a bluetooth description for using iPhone bluetooth module. In your info.plist file, add key-value: "),n("strong",[e._v('Privacy - Bluetooth Peripheral Usage Description - "your description"')]),e._v(", as the screenshot below:")])]),e._v(" "),n("p",[n("img",{attrs:{src:a(185),alt:"bluetoothdescription"}})]),e._v(" "),n("h4",{attrs:{id:"starting-development"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starting-development","aria-hidden":"true"}},[e._v("#")]),e._v(" Starting Development")]),e._v(" "),n("h5",{attrs:{id:"scan-devices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scan-devices","aria-hidden":"true"}},[e._v("#")]),e._v(" Scan devices")]),e._v(" "),n("p",[e._v("Get the sharedinstance of MTTrackerManager, then you can check the bluetooth state of iPhone or start scanning devices.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// get sharedinstance of Manager\nMTTrackerManager *manager = [MTTrackerManager sharedInstance];\n\n// the bluetooth status of iPhone\nif(manager.bleState == Poweron) {\n   NSLog(@"the state is power on.");\n}\n\n// start scanning task.\n[manager startScan:^(NSArray<MTTracker *> *trackers){\n    // if manager found devices, this block will call back.\n}];   \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v('PS: the "trackers" array only contains '),n("strong",[e._v("Unbind devices")]),e._v(' (The following will explain "binding").')]),e._v(" "),n("h5",{attrs:{id:"bind-validating"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind-validating","aria-hidden":"true"}},[e._v("#")]),e._v(" Bind validating")]),e._v(" "),n("p",[e._v("Only bind trackers will work normally, we suggest that the users should keep 10cm between the tracker and  iPhone.")]),e._v(" "),n("p",[e._v("Based on previous experience, we create a new encryption for the communication between iPhone and trackers. on the other hand, the trackers' password is null, every tracker needs a password when the user bind it, when is it bind, this tracker will only accept connections from the owner's phone.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n  manager: MTTrackerManager sharedInstance\n*/\n//  set the password, the length must be 8.\n//  the password consists of uppercase and lowercase letters, numbers, special symbols.\nmanager.password = @"********";\n\n// start validating tracker bind operation.\n[manager bindingVerify:aTracker completion:^(BOOL success, NSError *error) {\n     // the tracker will be add to the "bindTrackers" array of the manager when it\'s validated.\n     // success == NO means validate failed.\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("PS: the unbind trackers will not work normally, we suggest that using the webserver for different bind passwords of the users.")]),e._v(" "),n("h5",{attrs:{id:"unbind-trackers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unbind-trackers","aria-hidden":"true"}},[e._v("#")]),e._v(" Unbind Trackers")]),e._v(" "),n("p",[e._v("if a user lose the tracker or he/she wants to give it others, the user should unbind the tracker. Strictly speaking, the user should keep connection of iPhone and trackers for the unbind operation unless the tracker is lost. The Tracker keeps bind password, unbind operations will delete the password for the next time work normally.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/*\n  manager: MTTrackerManager shared instance.\n*/\n// unbind tracker\n\n// the mac of the tracker\nNSString *mac = @"acd498765432";\n\n// unbind the tracker\n[manager unbindTracker:mac completion:^(BOOL success, NSError *error) {\n    // success YES means operate success, else NO.\n}];\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("h5",{attrs:{id:"get-the-information"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-information","aria-hidden":"true"}},[e._v("#")]),e._v(" Get the information")]),e._v(" "),n("p",[e._v("You can get the information of physical devices via the MTTracker instance, such as the mac address, rssi and so on.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// aTracker MTTracker instance\n\nNSString *mac = aTracker.mac; // mac address\nNSString *name = aTracker.name; // bluetooth name\nNSInteger rssi = aTraker.rssi;   // RSSI\nNSInteger battery = aTracker.battery; // battery 0～100\nConnection status = aTracker.connection; // current connection status\nModelType model = aTracker.model;    // the tracker's model\nDistance dis = aTracker.distance;    // distance information.\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("h5",{attrs:{id:"ring-the-tracker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ring-the-tracker","aria-hidden":"true"}},[e._v("#")]),e._v(" Ring the Tracker")]),e._v(" "),n("p",[e._v("you can ring the tracker via our APi. Of course, the device remains connected.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// aTracker MTTracker instance\n\n// ring == YES means ring the tracker, NO will stop the ring.\nBOOL ring = YES;\n\n// switch the bell status of the tracker\n[aTracker switchBellStatus:ring completion:^(BOOL success, NSError *error) {\n    if (success) {\n       NSLog(@"switch the ring status successfully!");   \n    }\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("h5",{attrs:{id:"the-disconnection-of-the-trackers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-disconnection-of-the-trackers","aria-hidden":"true"}},[e._v("#")]),e._v(" The disconnection of the trackers.")]),e._v(" "),n("p",[e._v("The tracker device have disconnection event, such as alert when disconnected.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// aTracker MTTracker instance\n\n// YES means the tracker will rings when disconnected, else Not.\nBOOL alert = YES;\n\n// set the disconnection alert\n[aTracker writeLossAlert:alert completion:^(BOOL success, NSError *error) {\n   \n    if (success) {\n       NSLog(@"config the disconnection alert successfully!");   \n    }\n}];]\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("h5",{attrs:{id:"receive-the-events-of-the-trackers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receive-the-events-of-the-trackers","aria-hidden":"true"}},[e._v("#")]),e._v(" Receive the events of the trackers")]),e._v(" "),n("p",[e._v("The iPhone accepts the devices events, listen them and handle the events.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// aTracker MTTracker instance\n[aTracker didReceive:^(Receiving rec) {\n    \n    // button pressed，\n    // handle the button pressed event\n    if(rec == ReceivingButtonPushed) {\n       NSLog(@"The button on the device is pressed"); \n    }\n}];\n\n// listen the event changes of the device\n[aTracker didConnectionChange:^(Connection con){\n    switch(con){\n        case ConnectionConnecting:\n            NSLog(@"Connection to the Tracker");\n            break;\n        case ConnectionConnected:\n            NSLog(@"Tracker is connected");\n            break;\n        case ConnectionDisconnected:\n            NSLog(@"Tracker is disconnected");\n            break;\n    }; \n}];\n\n// listen the data changes\n[aTracker didValueUpdate:^(){\n    /*\n      the trackers status updated, you may want to refresh the UI.\n    */\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br")])]),n("h5",{attrs:{id:"after-the-app-restarted"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#after-the-app-restarted","aria-hidden":"true"}},[e._v("#")]),e._v(" After the APP restarted")]),e._v(" "),n("p",[e._v("You may find the SDK operate the memory data only, if the APP is been killed, the Bind trackers will lose. so you should make the perpetual storage all by yourself, such as the current bind password, the MAC address of every tracker.")]),e._v(" "),n("p",[e._v("We also provide some APi for related operations after APP recovery.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// get a bind tracker instance\n/*\n  The SDK will handle the given mac address and generate a MTTracker instance intelligently, if the tracker is working around, the SDK will handle the connection and configuration automatically.\n  \n  The only thing that needs attention is the need to ensure that the provided mac address is bound， it means that you have used the method “- (void)bindingVerify:(MTTracker *)tracker completion:(void(^)(BOOL success, NSError *error))handler;” and got a success callback.\n  \n  at the same time, the devices correspond to Mac addresses will be added to the bindTrackers array by the manager.\n*/\nMTTracker *bindTracker = [aManager addTracker:@"xxxxxxxxxxxx"];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("h5",{attrs:{id:"about-the-user-switching"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#about-the-user-switching","aria-hidden":"true"}},[e._v("#")]),e._v(" About the user switching")]),e._v(" "),n("p",[e._v("sometimes the user may sign out the current account and sign in another account. At this point, we should remove the current bind trackers and load the new user's bind trackers.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// remove the bind trackers of current user.\n[aMTTrackerManager removeAllTrackers];\n\n// set the bind password of the new user\naMTTrackerManager.password = @"********"; \n\n/*\n    load the bind trackers\' mac addresses, assuming the array is bindMacs\n*/\nfor(NSinteger i = 0; i < bindMacs.count; i ++) {\n    // tracker is the bind tracker of the new user\n   MTTracker *tracker = [aMTTrackerManager addTracker:bindMacs[i]]; \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("h4",{attrs:{id:"advanced-operations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advanced-operations","aria-hidden":"true"}},[e._v("#")]),e._v(" !!!Advanced operations")]),e._v(" "),n("p",[e._v("This part is Advanced APi, we provide it to the Advanced developers. Unless you understand the results of what these operations will lead to, don't try it lightly.")]),e._v(" "),n("div",{staticClass:"language-objective-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// aTracker MTTracker instance\n\n// modify the delay of disconnected alert\n\n// it means the tracker will alert after "delay" seconds since the tracker is disconnected.\n// please note: the range is 1s-7s, Too small value may cause false alert.\nNSInteger delay = 7;\n\n// set the disconnect alert delay.\n[aTracker writeLossDelay:delay completion:^(BOOL success, NSError *error) {\n    \n    if(success) {  // write successfully.\n        \n    }\n}];\n\n// this parameter is the disconnect distance, the tracker will disconnect at that distance.\n// For example: is the level is "Far", the tracker will disconnect at 30m, "Middle": 20m,\n// "Near": 10m;\n// Please note the 30m/20m/10m above is not a real value, Because the actual environment is very complicated.\n// Three values: Far/Middle/Near for choosen, the default is "Far".\nDistanceLevel level = DistanceLevelFar;\n[aTracker writeLossDistance:level completion:^(BOOL success, NSError *error) {\n    if (success) {   // write successfully.\n    }\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br")])])])}],t=a(0),r=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);r.options.__file="iOS_MinewTrackerKit_Software_Development_Kit_Guide.md";s.default=r.exports}}]);