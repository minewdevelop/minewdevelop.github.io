(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{216:function(n,a,e){"use strict";e.r(a);var s=e(0),t=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"minewbeacon-admin-开发套件api说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minewbeacon-admin-开发套件api说明","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeacon Admin 开发套件APi说明")]),n._v(" "),e("p",[n._v("你可以使用此SDK对周围的Beacon进行诸如：uuid，major，minor等等参数配置。当前使用四个类实现这部分功能。")]),n._v(" "),e("h2",{attrs:{id:"类概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类概述","aria-hidden":"true"}},[n._v("#")]),n._v(" 类概述")]),n._v(" "),e("h3",{attrs:{id:"minewbeaconmanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconmanager","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconManager")]),n._v(" "),e("p",[n._v("用于扫描设备的管理类；")]),n._v(" "),e("p",[n._v("功能：")]),n._v(" "),e("ol",[e("li",[n._v("发起扫描／停止扫描；")]),n._v(" "),e("li",[n._v("获取当前扫描范围内设备／获取全部扫描过的设备；")]),n._v(" "),e("li",[n._v("获取当前蓝牙状态；")]),n._v(" "),e("li",[n._v("监听设备进出状态（代理回调）；")]),n._v(" "),e("li",[n._v("更新扫描到设备的数据（代理回调）；")]),n._v(" "),e("li",[n._v("监听蓝牙状态改变（代理回调）；")])]),n._v(" "),e("h3",{attrs:{id:"minewbeacon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minewbeacon","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeacon")]),n._v(" "),e("p",[n._v("扫描到设备的数据模型类")]),n._v(" "),e("p",[n._v("此类所有属性均为只读，底层将会周期性更新每个设备的最新数据（如果它没有离开扫描范围的话）。")]),n._v(" "),e("p",[n._v("功能：")]),n._v(" "),e("ol",[e("li",[n._v("导出设备数据为JSON字符串；")]),n._v(" "),e("li",[n._v("支持导入JSON字符串；")])]),n._v(" "),e("h3",{attrs:{id:"minewbeaconconnection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconconnection","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconConnection")]),n._v(" "),e("p",[n._v("设备与iPhone之间连接状态以及数据更新的维护类")]),n._v(" "),e("p",[n._v("每一个此类实例都对应一个MinewBeacon和MinewBeaconSetting（连接状态下）实例。")]),n._v(" "),e("p",[n._v("功能：")]),n._v(" "),e("ol",[e("li",[n._v("连接到某个设备／断开与某个设备的连接")]),n._v(" "),e("li",[n._v("更新属性“MinewBeaconSetting”的改动到设备（回调方法返回是否成功更新）")])]),n._v(" "),e("h3",{attrs:{id:"minewbeaconsetting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minewbeaconsetting","aria-hidden":"true"}},[n._v("#")]),n._v(" MinewBeaconSetting")]),n._v(" "),e("p",[n._v("连接到设备后的数据模型")]),n._v(" "),e("p",[n._v("此类只能在Connection实例发起连接并且连接成功后获取，部分属性可修改，修改后会临时缓存，只有通过Connectino实例成功更新到设备改动才会生效。")]),n._v(" "),e("p",[n._v("功能：")]),n._v(" "),e("ol",[e("li",[n._v("导出数据为JSON字符串；")]),n._v(" "),e("li",[n._v("导入JSON字符串；")])]),n._v(" "),e("h2",{attrs:{id:"使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 使用方法")]),n._v(" "),e("h3",{attrs:{id:"扫描设备部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扫描设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 扫描设备部分")]),n._v(" "),e("p",[n._v("MinewbeaconManager管理类来发起扫描，SDK会为扫描到的设备生成MinewBeacon实例；")]),n._v(" "),e("div",{staticClass:"language-objective-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n// 1.获取MinewBeaconManager实例，设置代理对象\nMinewBeaconManager *manager = [MinewBeaconManager sharedInstance];\nmanager.delegate = self;\n\n// 2.发起扫描\n[manager startScan];\n\n// 3.通过代理方法获取扫描数据更新\n// 此方法定时回调用于获取周围设备的最新扫描数据\n- (void)minewBeaconManager:(MinewBeaconManager * )manager didRangeBeacons:(NSArray<MinewBeacon *> * )beacons;\n\n\n\n/* 如果要监听设备的进出状态，可以通过实现以下方法 */\n\n// 监听消失设备\n- (void)minewBeaconManager:(MinewBeaconManager * )manager disappearBeacons:(NSArray<MinewBeacon *> *)beacons;\n\n// 监听新发现的设备\n- (void)minewBeaconManager:(MinewBeaconManager * )manager appearBeacons:(NSArray<MinewBeacon *> *)beacons;\n\n/* 还可以监听蓝牙的状态改变 */\n// 蓝牙状态：已开启，已关闭，未知\n// 仅在蓝牙已开启状态下才可以正常工作\n- (void)minewBeaconManager:(MinewBeaconManager *)manager didUpdateState:(BluetoothState)state;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("h3",{attrs:{id:"连接设备部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 连接设备部分")]),n._v(" "),e("p",[n._v("如果要连接设备，需要用扫描获取到的MinewBeacon实例来生成一个MinewBeaconConnection实例，通过Connection来管理连接／断开／更新数据等。")]),n._v(" "),e("div",{staticClass:"language-objective-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 1. 使用一个MinewBeacon实例生成Connection实例，设置代理\nMinewBeaconConnection *connection = [[MinewBeaconConnection alloc]initWithBeacon:abeacon];\nconnection.delegate = self;\n\n// 2. 连接设备\n[MinewBeaconConnection connect];\n\n// 3.通过代理方法获取连接状态\n- (void)beaconConnection:(MinewBeaconConnection *)connection didChangeState:(ConnectionState)state\n{\n  // 当连接成功后，connection实例的MinewBeaconSetting属性不再为空，这个MinewBeaconSetting实例就是从设备上获取到的数据信息\n  if(state == ConnectionStateConnected)\n  {\n    NSLog(@"已经连接到设备：%@，uuid：%@，major：%d...",connection.setting.name, connection.setting.uuid, connection.setting.major);\n  }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("h3",{attrs:{id:"配置设备部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置设备部分","aria-hidden":"true"}},[n._v("#")]),n._v(" 配置设备部分")]),n._v(" "),e("p",[n._v("在connection的状态为已连接时，可以修改其属性setting的所有非只读属性，修改完毕只需执行更新方法即可将改动更新到Beacon设备，通过代理方法可以知道是否已经成功更新。")]),n._v(" "),e("div",{staticClass:"language-objective-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 1.修改connection的setting属性\nMinewbeaconSetting *setting = aConnection.setting;\nsetting.uuid = @"FDA50693-A4E2-4FB1-AFCF-C6EB07647825";\nsetting.major = 1234;\nsetting.minor = 4321;\nsetting.name = @"MinewBeacon";\n/*.....*/\n\n// 2.更新改动到设备\n// 需要注意的是，这里的参数是Beacon设备的当前重启密码；\n[aConnection writeSetting:@"minew123"];\n\n// 3.通过代理方法获取是否成功更新改动到设备\n- (void)beaconConnection:(MinewBeaconConnection *)connection didWriteSetting:(BOOL)success\n{\n   if(success)\n     NSLog(@"all changes has updated!");\n   else \n     NSLog(@"update failed!");\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("p",[n._v("更多细节，详见Demo。")])])}],!1,null,null,null);t.options.__file="iOS_BeaconAdmin_Software_Development_Kit_Guide.md";a.default=t.exports}}]);