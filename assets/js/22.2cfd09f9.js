(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{221:function(e,a,n){"use strict";n.r(a);var s=n(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"minewkeyfinder-开发套件说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#minewkeyfinder-开发套件说明","aria-hidden":"true"}},[e._v("#")]),e._v(" MinewKeyfinder 开发套件说明")]),e._v(" "),n("h2",{attrs:{id:"新建工程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新建工程","aria-hidden":"true"}},[e._v("#")]),e._v(" 新建工程")]),e._v(" "),n("p",[e._v("Android Studio配置")]),e._v(" "),n("p",[e._v("targetSdkVersion版本选择 21\n将minewDevice.jar包放入道libs文件夹下,然后在当前工程下的build.gradle文件配置项中的dependencies新增内容,如下compile files('libs/minewDevice.jar')")]),e._v(" "),n("p",[e._v("Eclipse配置")]),e._v(" "),n("p",[e._v("targetSdkVersion版本选择 21\n将minewDevice.jar包放入道libs文件夹下,右击工程propeties,选择Java build Path，在Library选项中添加minewDevice依赖关系")]),e._v(" "),n("p",[e._v("当前SDK需要的权限：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>\n<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>\n<uses-permission android:name="android.permission.MEDIA_CONTENT_CONTROL"/>\n<uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>\n<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>\n<uses-permission android:name="android.permission.RECORD_AUDIO"/>\n<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>\n<uses-permission android:name="android.permission.INTERNET"/>\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>\n<uses-permission android:name="android.permission.BLUETOOTH"/>\n<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("添加service和receiver,如下")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<service android:name="com.minew.device.service.ConnectService"/>\n<receiver android:name="com.minew.device.BluetoothChangedReceiver">\n        <intent-filter>\n            <action android:name="android.bluetooth.adapter.action.STATE_CHANGED"/>\n        </intent-filter>\n</receiver>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("AndroidStudio build.gradle 添加如下依赖：\ndependencies {")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("testCompile 'junit:junit:4.12'\ncompile 'com.android.support:appcompat-v7:23.4.0'\ncompile 'com.android.support:recyclerview-v7:23.3.0'\ncompile 'com.google.code.gson:gson:2.2.4'\ncompile 'org.greenrobot:eventbus:3.0.0'\ncompile files('libs/minewDevice.jar')\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("}\n具体实现细节，请参考demo。")]),e._v(" "),n("p",[e._v("本防丢器SDK提供三个类来获取防丢器信息以及对防丢器进行管理，MinewDeviceManager是所有设备的管理类，MinewDevice是设备实例类，MinewDeviceValue是设备的信息数据类。所有的事件回调采用代理模式。关于各个类的详述请看以下对应部分。注意不要随意的停止扫描，只有当确定所有的设备都已连接上的时候才停止扫描。当有设备断开时要重新开启扫描，否则不能重连。")]),e._v(" "),n("h3",{attrs:{id:"开始使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始使用","aria-hidden":"true"}},[e._v("#")]),e._v(" 开始使用")]),e._v(" "),n("h4",{attrs:{id:"设备管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设备管理","aria-hidden":"true"}},[e._v("#")]),e._v(" 设备管理")]),e._v(" "),n("p",[e._v("MinewDeviceManager（以下简称Manager）类是一个单例管理类，用来管理扫描／连接／绑定设备以及设备的状态更新等，当然，如果设备有诸如连接状态改变之类的事件，也可以从此类获取到回调。")]),e._v(" "),n("p",[e._v("1.初始化Manager，配置代理：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("MinewDeviceManager manager = MinewDeviceManager.getInstance(this);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("2.发起扫描，检索周围的设备:")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" manager.startScan();\n     PS：如果用户手动关闭了蓝牙，可以通过监听MinewDeviceManagerListener的回调方法获取到状态改变，state为蓝牙状态\n     \n manager.setMinewDeviceManagerListener(MinewDeviceManagerListener minewDeviceManagerListener);\n\t\n void onUpdateBluetoothState:(BluetoothState state){}   \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("发起扫描后，当Manager检测到周围的设备，会为这些设备依次创建一个MinewDevice实例，同时通过以下三个代理方法回调。")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 只要Manager发现周围的设备此方法即进行回调，devices参数包括所有被扫描过的设备\n void onScanDevices(List<MinewDevice> devices)；\n\n// 此方法仅当设备消失时才进行回调（PS：我们规定，如果被扫描的设备10秒内没有再次被扫描到，那就是消失了。）\n void onDisappearDevices(List<MinewDevice> devices);\n\n// 此方法仅当新出现设备时才进行回调（PS：我们规定，如果设备第一次被扫描到或者之前消失过再次被扫描到都将当作新出现设备。）\n void onAppearDevices(List<MinewDevice> devices);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("当然，开发者也可以使用如下方式主动获取当前扫描到的所有设备：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("List<MinewDevice> allDevices = MinewDeviceManager.scannedDevices;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("3.绑定设备：")]),e._v(" "),n("p",[e._v("只有设备被绑定后，我们才对设备的状态进行持续更新，特别是设备与手机之间的连接状态更新。")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("manager.bind(minewDevice);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("同时，开发者还可以用以下方式获取到之前绑定过的所有设备：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("List<MinewDevice> allBindDevices = MinewDeviceManager.bindDevices;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("4.连接到设备：")]),e._v(" "),n("p",[e._v("我们提供了主动连接的API，同时通过代理方法监听设备的连接状态改变：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("manager.connect(minewDevice);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("如果设备发生连接状态的改变，将通过以下方法回调给开发者：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 当设备的连接状态发生改变，此方法将会回调\n- void onDeviceChangeStatus(MinewDevice device,DeviceLinkStatus status);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("针对已经绑定的设备，我们提供了持续更新设备数据的回调")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 当绑定的设备发生数据改变时，此方法将会回调。\n void onUpdateBindDevice:(List<MinewDevice> device);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h3",{attrs:{id:"工作开关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作开关","aria-hidden":"true"}},[e._v("#")]),e._v(" 工作开关")]),e._v(" "),n("p",[e._v("2.1.1版本加入的控制开关。")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private boolean disableAutoProcessing;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("此属性默认为false，如果需要停止自动工作，需要设置为true，只要对此属性进行Set操作，相关工作状态将会立即生效。另外值得注意的是。")]),e._v(" "),n("p",[e._v("警告：如果您不清晰此属性所带来的影响，请不要随意修改。")]),e._v(" "),n("p",[e._v("更多详情请见Demo。")]),e._v(" "),n("h4",{attrs:{id:"单个设备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单个设备","aria-hidden":"true"}},[e._v("#")]),e._v(" 单个设备")]),e._v(" "),n("p",[e._v("对于单个设备，我们为每个设备生成一个MinewDevice（以下简称Device）实例，每个实例包含了设备的信息，以及对设备的操作方法和相关回调。")]),e._v(" "),n("p",[e._v("关于设备信息，目前采用键值对的方式获取。比如获取Device的mac地址：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 获取MAC地址的value\nMinewDeviceValue value = minewDevice.getValue(ValueIndex.ValueIndex_MacAddress)；\n\n// 获取MAC地址\nString macAddress = value.getStringValue;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("你可能注意到了，这里的  minewDevice.getValue(ValueIndex.ValueIndex_MacAddress)方法返回的是一个MinewValue（以下简称value）类实例，value实例是对多种数据类型的进一步封装，比如bool／integer／string／float等。关于Device信息的对照，后文有更详细的说明。")]),e._v(" "),n("p",[e._v("对于Device实例某项数据进行修改参见如下代码：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 生成一个MinewValue实例\nMinewDeviceValue value = MinewDeviceValue.index(ValueIndex.ValueIndex_Connected, true);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("如果要修改的数据是布尔型／整型／浮点型，请按照如下示例进行：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 配置设备断开报警的延迟时间\nminewDevice.setValue(MinewDeviceValue.index(ValueIndex.ValueIndex_AlarmDelay, deleyValue));\n\n// 配置设备断开是否报警\nminewDevice.setValue(MinewDeviceValue.index(ValueIndex.ValueIndex_DeviceLoseAlert, loseAlert));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("我们提供了一些指令，用来控制设备上的一些特性，比如，查找设备，指令发送成功后设备将会响铃")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("minewDevice.sendInstruction(InstrucIndex_Search);\t\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("当指令发送完成后，同样能从回调中获取指令是否成功发送的回调")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index参数是对应的指令枚举，device是某个设备对应的实例，success是布尔值，标注是否成功。\n void onSendData(MinewDevice minewDevice, InstrucIndex index, boolean success);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("当然，还有一些事件不是主动触发的，比如设备向手机发送了一个指令，我们可以使用以下方式监听来自设备端的指令：")]),e._v(" "),n("div",{staticClass:"language-android line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index参数是设备发来的指令枚举\n void onReceiveInstructionfromDevice(InstrucIndex index, MinewDevice device);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("OK，至此你已经可以着手开发了，我们提供了一份Demo代码，你可以对MinewDeviceManager和MinewDevice进行二次封装，用来保证准确接受到每一次的事件回调，当然，这样的示例在Demo里也是有的。")]),e._v(" "),n("h2",{attrs:{id:"关于minewdevicevalue的附加说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于minewdevicevalue的附加说明","aria-hidden":"true"}},[e._v("#")]),e._v(" 关于MinewDeviceValue的附加说明")]),e._v(" "),n("p",[e._v("通过设备的属性可以获取到对应类型的值，比如")]),e._v(" "),n("pre",[n("code",[e._v(" 设备名称：String name = aDeviceValue.stringValue\n 电池电量：int battery = aDeviceValue.intValue;\n 是否绑定：boolean bind = aDeviceValue.boolValue;\n")])]),e._v(" "),n("p",[e._v("DeviceValue实例共有如下几种属性，可以获取到对应类型的数据，")]),e._v(" "),n("pre",[n("code",[e._v("// 数据对应的枚举\npirvate ValueIndex index;\n\n// 获取整形数据\nprivate int intValue;\n\n// 获取浮点型数据\nprivate float floatValue;\n\n// 获取字符串型数据\nprivate String stringValue;\n\n// 获取16进制data型数据\nprivate byte[] dataValue;\n\n// 获取bool类型数据\nprivate boolean boolValue;\n")])]),e._v(" "),n("p",[e._v("如果需要修改设备的某项信息，可以自行生成一个Value实例")]),e._v(" "),n("pre",[n("code",[e._v('// 生成一个MinewDeviceValue实例\n public <T> MinewDeviceValue index(ValueIndex index, T t){}\n\n 比如创建名字实例\n MinewDeviceValue nameValue = MinewDeviceValue.index(ValueIndex_Name,"手机");\n \n 创建设备模式实例 \n MinewDeviceValue modeValue = MinewDeviceValue.index(ValueIndex_Mode,2);\n')])]),e._v(" "),n("p",[e._v("​      另外需要注意的是，所有的数据在获取以及生成时，必须严格按照以下对应关系进行。另外并非全部信息都可以被修改，请看下表：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("设备属性")]),e._v(" "),n("th",[e._v("说明")]),e._v(" "),n("th",[e._v("数据类型")]),e._v(" "),n("th",[e._v("读写权限")]),e._v(" "),n("th",[e._v("备注")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("ValueIndex_Name")]),e._v(" "),n("td",[e._v("自定义的设备名")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_HeadImage")]),e._v(" "),n("td",[e._v("设备头像")]),e._v(" "),n("td",[e._v("dataValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DeviceId")]),e._v(" "),n("td",[e._v("从设备读取到的名称")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td",[e._v("蓝牙返回的设备名")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_MacAddress")]),e._v(" "),n("td",[e._v("Mac地址")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Rssi")]),e._v(" "),n("td",[e._v("信号强度")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Mode")]),e._v(" "),n("td",[e._v("设备模式")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Distance")]),e._v(" "),n("td",[e._v("设备距离")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Battery")]),e._v(" "),n("td",[e._v("电池电量")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Bind")]),e._v(" "),n("td",[e._v("绑定状态")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearTime")]),e._v(" "),n("td",[e._v("断开时间")]),e._v(" "),n("td",[e._v("stringValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td",[e._v("格式：yyyy-MM-dd hh:mm:ss")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearLong")]),e._v(" "),n("td",[e._v("断开经度")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DisappearLati")]),e._v(" "),n("td",[e._v("断开纬度")]),e._v(" "),n("td",[e._v("floatValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Connected")]),e._v(" "),n("td",[e._v("连接状态")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_DeviceLoseAlert")]),e._v(" "),n("td",[e._v("断开报警")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td",[e._v("标记设备断开时是否响铃")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_Search")]),e._v(" "),n("td",[e._v("查找状态")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td",[e._v("用于UI更新，设备是否被查找")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AppLoseAlert")]),e._v(" "),n("td",[e._v("断开通知")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td",[e._v("用于标记设备断开时手机端是否需要反馈")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_FeatureSupport")]),e._v(" "),n("td",[e._v("设备是否支持参数调整")]),e._v(" "),n("td",[e._v("boolValue")]),e._v(" "),n("td",[e._v("只读")]),e._v(" "),n("td",[e._v("如果设备支持距离调节或者延迟报警调节，这里的值为YES")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AlarmDistance")]),e._v(" "),n("td",[e._v("调节设备的报警距离")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td",[e._v("一共有1-8，8个档位，距离由近到远（仅针对支持的设备）")])]),e._v(" "),n("tr",[n("td",[e._v("ValueIndex_AlarmDelay")]),e._v(" "),n("td",[e._v("调节设备断开时的报警延迟")]),e._v(" "),n("td",[e._v("intValue")]),e._v(" "),n("td",[e._v("可读写")]),e._v(" "),n("td",[e._v("0-8秒可调范围")])])])]),e._v(" "),n("h2",{attrs:{id:"changelog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changelog","aria-hidden":"true"}},[e._v("#")]),e._v(" ChangeLog")]),e._v(" "),n("pre",[n("code",[e._v("2017.4.26   ver 2.1.2 更新部分文本描述；\n2017.4.20   ver 2.1.1 添加工作开关。；\n2017.1.6    ver 2.0 添加权限说明以及新特性说明。\n2016.9.12   Ver 1.0\n")])]),e._v(" "),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("​")])])}],!1,null,null,null);i.options.__file="Android_Keyfinder_Software_Development_Kit_Guide.md";a.default=i.exports}}]);